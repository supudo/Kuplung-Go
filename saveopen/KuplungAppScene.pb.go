// Code generated by protoc-gen-go. DO NOT EDIT.
// source: KuplungAppScene.proto

package saveopen

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Scene struct {
	Models               []*MeshModel `protobuf:"bytes,1,rep,name=models" json:"models,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Scene) Reset()         { *m = Scene{} }
func (m *Scene) String() string { return proto.CompactTextString(m) }
func (*Scene) ProtoMessage()    {}
func (*Scene) Descriptor() ([]byte, []int) {
	return fileDescriptor_89a2cd885987a1d0, []int{0}
}

func (m *Scene) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Scene.Unmarshal(m, b)
}
func (m *Scene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Scene.Marshal(b, m, deterministic)
}
func (m *Scene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Scene.Merge(m, src)
}
func (m *Scene) XXX_Size() int {
	return xxx_messageInfo_Scene.Size(m)
}
func (m *Scene) XXX_DiscardUnknown() {
	xxx_messageInfo_Scene.DiscardUnknown(m)
}

var xxx_messageInfo_Scene proto.InternalMessageInfo

func (m *Scene) GetModels() []*MeshModel {
	if m != nil {
		return m.Models
	}
	return nil
}

type MeshModel struct {
	ModelID                          *int32            `protobuf:"varint,1,req,name=ModelID" json:"ModelID,omitempty"`
	Settings_DeferredRender          *bool             `protobuf:"varint,2,req,name=Settings_DeferredRender,json=SettingsDeferredRender" json:"Settings_DeferredRender,omitempty"`
	Setting_CelShading               *bool             `protobuf:"varint,3,req,name=Setting_CelShading,json=SettingCelShading" json:"Setting_CelShading,omitempty"`
	Setting_Wireframe                *bool             `protobuf:"varint,4,req,name=Setting_Wireframe,json=SettingWireframe" json:"Setting_Wireframe,omitempty"`
	Setting_UseTessellation          *bool             `protobuf:"varint,5,req,name=Setting_UseTessellation,json=SettingUseTessellation" json:"Setting_UseTessellation,omitempty"`
	Setting_UseCullFace              *bool             `protobuf:"varint,6,req,name=Setting_UseCullFace,json=SettingUseCullFace" json:"Setting_UseCullFace,omitempty"`
	Setting_Alpha                    *float32          `protobuf:"fixed32,7,req,name=Setting_Alpha,json=SettingAlpha" json:"Setting_Alpha,omitempty"`
	Setting_TessellationSubdivision  *int32            `protobuf:"varint,8,req,name=Setting_TessellationSubdivision,json=SettingTessellationSubdivision" json:"Setting_TessellationSubdivision,omitempty"`
	PositionX                        *ObjectCoordinate `protobuf:"bytes,9,req,name=positionX" json:"positionX,omitempty"`
	PositionY                        *ObjectCoordinate `protobuf:"bytes,10,req,name=positionY" json:"positionY,omitempty"`
	PositionZ                        *ObjectCoordinate `protobuf:"bytes,11,req,name=positionZ" json:"positionZ,omitempty"`
	ScaleX                           *ObjectCoordinate `protobuf:"bytes,12,req,name=scaleX" json:"scaleX,omitempty"`
	ScaleY                           *ObjectCoordinate `protobuf:"bytes,13,req,name=scaleY" json:"scaleY,omitempty"`
	ScaleZ                           *ObjectCoordinate `protobuf:"bytes,14,req,name=scaleZ" json:"scaleZ,omitempty"`
	RotateX                          *ObjectCoordinate `protobuf:"bytes,15,req,name=rotateX" json:"rotateX,omitempty"`
	RotateY                          *ObjectCoordinate `protobuf:"bytes,16,req,name=rotateY" json:"rotateY,omitempty"`
	RotateZ                          *ObjectCoordinate `protobuf:"bytes,17,req,name=rotateZ" json:"rotateZ,omitempty"`
	DisplaceX                        *ObjectCoordinate `protobuf:"bytes,18,req,name=displaceX" json:"displaceX,omitempty"`
	DisplaceY                        *ObjectCoordinate `protobuf:"bytes,19,req,name=displaceY" json:"displaceY,omitempty"`
	DisplaceZ                        *ObjectCoordinate `protobuf:"bytes,20,req,name=displaceZ" json:"displaceZ,omitempty"`
	Setting_MaterialRefraction       *ObjectCoordinate `protobuf:"bytes,21,req,name=Setting_MaterialRefraction,json=SettingMaterialRefraction" json:"Setting_MaterialRefraction,omitempty"`
	Setting_MaterialSpecularExp      *ObjectCoordinate `protobuf:"bytes,22,req,name=Setting_MaterialSpecularExp,json=SettingMaterialSpecularExp" json:"Setting_MaterialSpecularExp,omitempty"`
	Setting_ModelViewSkin            *int32            `protobuf:"varint,23,req,name=Setting_ModelViewSkin,json=SettingModelViewSkin" json:"Setting_ModelViewSkin,omitempty"`
	SolidLightSkin_MaterialColor     *Vec3             `protobuf:"bytes,24,req,name=solidLightSkin_MaterialColor,json=solidLightSkinMaterialColor" json:"solidLightSkin_MaterialColor,omitempty"`
	SolidLightSkin_Ambient           *Vec3             `protobuf:"bytes,25,req,name=solidLightSkin_Ambient,json=solidLightSkinAmbient" json:"solidLightSkin_Ambient,omitempty"`
	SolidLightSkin_Diffuse           *Vec3             `protobuf:"bytes,26,req,name=solidLightSkin_Diffuse,json=solidLightSkinDiffuse" json:"solidLightSkin_Diffuse,omitempty"`
	SolidLightSkin_Specular          *Vec3             `protobuf:"bytes,27,req,name=solidLightSkin_Specular,json=solidLightSkinSpecular" json:"solidLightSkin_Specular,omitempty"`
	SolidLightSkin_Ambient_Strength  *float32          `protobuf:"fixed32,28,req,name=solidLightSkin_Ambient_Strength,json=solidLightSkinAmbientStrength" json:"solidLightSkin_Ambient_Strength,omitempty"`
	SolidLightSkin_Diffuse_Strength  *float32          `protobuf:"fixed32,29,req,name=solidLightSkin_Diffuse_Strength,json=solidLightSkinDiffuseStrength" json:"solidLightSkin_Diffuse_Strength,omitempty"`
	SolidLightSkin_Specular_Strength *float32          `protobuf:"fixed32,30,req,name=solidLightSkin_Specular_Strength,json=solidLightSkinSpecularStrength" json:"solidLightSkin_Specular_Strength,omitempty"`
	Setting_LightPosition            *Vec3             `protobuf:"bytes,31,req,name=Setting_LightPosition,json=SettingLightPosition" json:"Setting_LightPosition,omitempty"`
	Setting_LightDirection           *Vec3             `protobuf:"bytes,32,req,name=Setting_LightDirection,json=SettingLightDirection" json:"Setting_LightDirection,omitempty"`
	Setting_LightAmbient             *Vec3             `protobuf:"bytes,33,req,name=Setting_LightAmbient,json=SettingLightAmbient" json:"Setting_LightAmbient,omitempty"`
	Setting_LightDiffuse             *Vec3             `protobuf:"bytes,34,req,name=Setting_LightDiffuse,json=SettingLightDiffuse" json:"Setting_LightDiffuse,omitempty"`
	Setting_LightSpecular            *Vec3             `protobuf:"bytes,35,req,name=Setting_LightSpecular,json=SettingLightSpecular" json:"Setting_LightSpecular,omitempty"`
	Setting_LightStrengthAmbient     *float32          `protobuf:"fixed32,36,req,name=Setting_LightStrengthAmbient,json=SettingLightStrengthAmbient" json:"Setting_LightStrengthAmbient,omitempty"`
	Setting_LightStrengthDiffuse     *float32          `protobuf:"fixed32,37,req,name=Setting_LightStrengthDiffuse,json=SettingLightStrengthDiffuse" json:"Setting_LightStrengthDiffuse,omitempty"`
	Setting_LightStrengthSpecular    *float32          `protobuf:"fixed32,38,req,name=Setting_LightStrengthSpecular,json=SettingLightStrengthSpecular" json:"Setting_LightStrengthSpecular,omitempty"`
	MaterialIlluminationModel        *int32            `protobuf:"varint,39,req,name=materialIlluminationModel" json:"materialIlluminationModel,omitempty"`
	DisplacementHeightScale          *ObjectCoordinate `protobuf:"bytes,40,req,name=displacementHeightScale" json:"displacementHeightScale,omitempty"`
	ShowMaterialEditor               *bool             `protobuf:"varint,41,req,name=showMaterialEditor" json:"showMaterialEditor,omitempty"`
	MaterialAmbient                  *MaterialColor    `protobuf:"bytes,42,req,name=materialAmbient" json:"materialAmbient,omitempty"`
	MaterialDiffuse                  *MaterialColor    `protobuf:"bytes,43,req,name=materialDiffuse" json:"materialDiffuse,omitempty"`
	MaterialSpecular                 *MaterialColor    `protobuf:"bytes,44,req,name=materialSpecular" json:"materialSpecular,omitempty"`
	MaterialEmission                 *MaterialColor    `protobuf:"bytes,45,req,name=materialEmission" json:"materialEmission,omitempty"`
	Setting_ParallaxMapping          *bool             `protobuf:"varint,46,req,name=Setting_ParallaxMapping,json=SettingParallaxMapping" json:"Setting_ParallaxMapping,omitempty"`
	Effect_GBlur_Mode                *int32            `protobuf:"varint,47,req,name=Effect_GBlur_Mode,json=EffectGBlurMode" json:"Effect_GBlur_Mode,omitempty"`
	Effect_GBlur_Radius              *ObjectCoordinate `protobuf:"bytes,48,req,name=Effect_GBlur_Radius,json=EffectGBlurRadius" json:"Effect_GBlur_Radius,omitempty"`
	Effect_GBlur_Width               *ObjectCoordinate `protobuf:"bytes,49,req,name=Effect_GBlur_Width,json=EffectGBlurWidth" json:"Effect_GBlur_Width,omitempty"`
	Effect_BloomDoBloom              *bool             `protobuf:"varint,50,req,name=Effect_Bloom_doBloom,json=EffectBloomDoBloom" json:"Effect_Bloom_doBloom,omitempty"`
	Effect_Bloom_WeightA             *float32          `protobuf:"fixed32,51,req,name=Effect_Bloom_WeightA,json=EffectBloomWeightA" json:"Effect_Bloom_WeightA,omitempty"`
	Effect_Bloom_WeightB             *float32          `protobuf:"fixed32,52,req,name=Effect_Bloom_WeightB,json=EffectBloomWeightB" json:"Effect_Bloom_WeightB,omitempty"`
	Effect_Bloom_WeightC             *float32          `protobuf:"fixed32,53,req,name=Effect_Bloom_WeightC,json=EffectBloomWeightC" json:"Effect_Bloom_WeightC,omitempty"`
	Effect_Bloom_WeightD             *float32          `protobuf:"fixed32,54,req,name=Effect_Bloom_WeightD,json=EffectBloomWeightD" json:"Effect_Bloom_WeightD,omitempty"`
	Effect_Bloom_Vignette            *float32          `protobuf:"fixed32,55,req,name=Effect_Bloom_Vignette,json=EffectBloomVignette" json:"Effect_Bloom_Vignette,omitempty"`
	Effect_Bloom_VignetteAtt         *float32          `protobuf:"fixed32,56,req,name=Effect_Bloom_VignetteAtt,json=EffectBloomVignetteAtt" json:"Effect_Bloom_VignetteAtt,omitempty"`
	Setting_LightingPass_DrawMode    *int32            `protobuf:"varint,57,req,name=Setting_LightingPass_DrawMode,json=SettingLightingPassDrawMode" json:"Setting_LightingPass_DrawMode,omitempty"`
	MeshObject                       *Mesh             `protobuf:"bytes,58,req,name=meshObject" json:"meshObject,omitempty"`
	XXX_NoUnkeyedLiteral             struct{}          `json:"-"`
	XXX_unrecognized                 []byte            `json:"-"`
	XXX_sizecache                    int32             `json:"-"`
}

func (m *MeshModel) Reset()         { *m = MeshModel{} }
func (m *MeshModel) String() string { return proto.CompactTextString(m) }
func (*MeshModel) ProtoMessage()    {}
func (*MeshModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_89a2cd885987a1d0, []int{1}
}

func (m *MeshModel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshModel.Unmarshal(m, b)
}
func (m *MeshModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshModel.Marshal(b, m, deterministic)
}
func (m *MeshModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshModel.Merge(m, src)
}
func (m *MeshModel) XXX_Size() int {
	return xxx_messageInfo_MeshModel.Size(m)
}
func (m *MeshModel) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshModel.DiscardUnknown(m)
}

var xxx_messageInfo_MeshModel proto.InternalMessageInfo

func (m *MeshModel) GetModelID() int32 {
	if m != nil && m.ModelID != nil {
		return *m.ModelID
	}
	return 0
}

func (m *MeshModel) GetSettings_DeferredRender() bool {
	if m != nil && m.Settings_DeferredRender != nil {
		return *m.Settings_DeferredRender
	}
	return false
}

func (m *MeshModel) GetSetting_CelShading() bool {
	if m != nil && m.Setting_CelShading != nil {
		return *m.Setting_CelShading
	}
	return false
}

func (m *MeshModel) GetSetting_Wireframe() bool {
	if m != nil && m.Setting_Wireframe != nil {
		return *m.Setting_Wireframe
	}
	return false
}

func (m *MeshModel) GetSetting_UseTessellation() bool {
	if m != nil && m.Setting_UseTessellation != nil {
		return *m.Setting_UseTessellation
	}
	return false
}

func (m *MeshModel) GetSetting_UseCullFace() bool {
	if m != nil && m.Setting_UseCullFace != nil {
		return *m.Setting_UseCullFace
	}
	return false
}

func (m *MeshModel) GetSetting_Alpha() float32 {
	if m != nil && m.Setting_Alpha != nil {
		return *m.Setting_Alpha
	}
	return 0
}

func (m *MeshModel) GetSetting_TessellationSubdivision() int32 {
	if m != nil && m.Setting_TessellationSubdivision != nil {
		return *m.Setting_TessellationSubdivision
	}
	return 0
}

func (m *MeshModel) GetPositionX() *ObjectCoordinate {
	if m != nil {
		return m.PositionX
	}
	return nil
}

func (m *MeshModel) GetPositionY() *ObjectCoordinate {
	if m != nil {
		return m.PositionY
	}
	return nil
}

func (m *MeshModel) GetPositionZ() *ObjectCoordinate {
	if m != nil {
		return m.PositionZ
	}
	return nil
}

func (m *MeshModel) GetScaleX() *ObjectCoordinate {
	if m != nil {
		return m.ScaleX
	}
	return nil
}

func (m *MeshModel) GetScaleY() *ObjectCoordinate {
	if m != nil {
		return m.ScaleY
	}
	return nil
}

func (m *MeshModel) GetScaleZ() *ObjectCoordinate {
	if m != nil {
		return m.ScaleZ
	}
	return nil
}

func (m *MeshModel) GetRotateX() *ObjectCoordinate {
	if m != nil {
		return m.RotateX
	}
	return nil
}

func (m *MeshModel) GetRotateY() *ObjectCoordinate {
	if m != nil {
		return m.RotateY
	}
	return nil
}

func (m *MeshModel) GetRotateZ() *ObjectCoordinate {
	if m != nil {
		return m.RotateZ
	}
	return nil
}

func (m *MeshModel) GetDisplaceX() *ObjectCoordinate {
	if m != nil {
		return m.DisplaceX
	}
	return nil
}

func (m *MeshModel) GetDisplaceY() *ObjectCoordinate {
	if m != nil {
		return m.DisplaceY
	}
	return nil
}

func (m *MeshModel) GetDisplaceZ() *ObjectCoordinate {
	if m != nil {
		return m.DisplaceZ
	}
	return nil
}

func (m *MeshModel) GetSetting_MaterialRefraction() *ObjectCoordinate {
	if m != nil {
		return m.Setting_MaterialRefraction
	}
	return nil
}

func (m *MeshModel) GetSetting_MaterialSpecularExp() *ObjectCoordinate {
	if m != nil {
		return m.Setting_MaterialSpecularExp
	}
	return nil
}

func (m *MeshModel) GetSetting_ModelViewSkin() int32 {
	if m != nil && m.Setting_ModelViewSkin != nil {
		return *m.Setting_ModelViewSkin
	}
	return 0
}

func (m *MeshModel) GetSolidLightSkin_MaterialColor() *Vec3 {
	if m != nil {
		return m.SolidLightSkin_MaterialColor
	}
	return nil
}

func (m *MeshModel) GetSolidLightSkin_Ambient() *Vec3 {
	if m != nil {
		return m.SolidLightSkin_Ambient
	}
	return nil
}

func (m *MeshModel) GetSolidLightSkin_Diffuse() *Vec3 {
	if m != nil {
		return m.SolidLightSkin_Diffuse
	}
	return nil
}

func (m *MeshModel) GetSolidLightSkin_Specular() *Vec3 {
	if m != nil {
		return m.SolidLightSkin_Specular
	}
	return nil
}

func (m *MeshModel) GetSolidLightSkin_Ambient_Strength() float32 {
	if m != nil && m.SolidLightSkin_Ambient_Strength != nil {
		return *m.SolidLightSkin_Ambient_Strength
	}
	return 0
}

func (m *MeshModel) GetSolidLightSkin_Diffuse_Strength() float32 {
	if m != nil && m.SolidLightSkin_Diffuse_Strength != nil {
		return *m.SolidLightSkin_Diffuse_Strength
	}
	return 0
}

func (m *MeshModel) GetSolidLightSkin_Specular_Strength() float32 {
	if m != nil && m.SolidLightSkin_Specular_Strength != nil {
		return *m.SolidLightSkin_Specular_Strength
	}
	return 0
}

func (m *MeshModel) GetSetting_LightPosition() *Vec3 {
	if m != nil {
		return m.Setting_LightPosition
	}
	return nil
}

func (m *MeshModel) GetSetting_LightDirection() *Vec3 {
	if m != nil {
		return m.Setting_LightDirection
	}
	return nil
}

func (m *MeshModel) GetSetting_LightAmbient() *Vec3 {
	if m != nil {
		return m.Setting_LightAmbient
	}
	return nil
}

func (m *MeshModel) GetSetting_LightDiffuse() *Vec3 {
	if m != nil {
		return m.Setting_LightDiffuse
	}
	return nil
}

func (m *MeshModel) GetSetting_LightSpecular() *Vec3 {
	if m != nil {
		return m.Setting_LightSpecular
	}
	return nil
}

func (m *MeshModel) GetSetting_LightStrengthAmbient() float32 {
	if m != nil && m.Setting_LightStrengthAmbient != nil {
		return *m.Setting_LightStrengthAmbient
	}
	return 0
}

func (m *MeshModel) GetSetting_LightStrengthDiffuse() float32 {
	if m != nil && m.Setting_LightStrengthDiffuse != nil {
		return *m.Setting_LightStrengthDiffuse
	}
	return 0
}

func (m *MeshModel) GetSetting_LightStrengthSpecular() float32 {
	if m != nil && m.Setting_LightStrengthSpecular != nil {
		return *m.Setting_LightStrengthSpecular
	}
	return 0
}

func (m *MeshModel) GetMaterialIlluminationModel() int32 {
	if m != nil && m.MaterialIlluminationModel != nil {
		return *m.MaterialIlluminationModel
	}
	return 0
}

func (m *MeshModel) GetDisplacementHeightScale() *ObjectCoordinate {
	if m != nil {
		return m.DisplacementHeightScale
	}
	return nil
}

func (m *MeshModel) GetShowMaterialEditor() bool {
	if m != nil && m.ShowMaterialEditor != nil {
		return *m.ShowMaterialEditor
	}
	return false
}

func (m *MeshModel) GetMaterialAmbient() *MaterialColor {
	if m != nil {
		return m.MaterialAmbient
	}
	return nil
}

func (m *MeshModel) GetMaterialDiffuse() *MaterialColor {
	if m != nil {
		return m.MaterialDiffuse
	}
	return nil
}

func (m *MeshModel) GetMaterialSpecular() *MaterialColor {
	if m != nil {
		return m.MaterialSpecular
	}
	return nil
}

func (m *MeshModel) GetMaterialEmission() *MaterialColor {
	if m != nil {
		return m.MaterialEmission
	}
	return nil
}

func (m *MeshModel) GetSetting_ParallaxMapping() bool {
	if m != nil && m.Setting_ParallaxMapping != nil {
		return *m.Setting_ParallaxMapping
	}
	return false
}

func (m *MeshModel) GetEffect_GBlur_Mode() int32 {
	if m != nil && m.Effect_GBlur_Mode != nil {
		return *m.Effect_GBlur_Mode
	}
	return 0
}

func (m *MeshModel) GetEffect_GBlur_Radius() *ObjectCoordinate {
	if m != nil {
		return m.Effect_GBlur_Radius
	}
	return nil
}

func (m *MeshModel) GetEffect_GBlur_Width() *ObjectCoordinate {
	if m != nil {
		return m.Effect_GBlur_Width
	}
	return nil
}

func (m *MeshModel) GetEffect_BloomDoBloom() bool {
	if m != nil && m.Effect_BloomDoBloom != nil {
		return *m.Effect_BloomDoBloom
	}
	return false
}

func (m *MeshModel) GetEffect_Bloom_WeightA() float32 {
	if m != nil && m.Effect_Bloom_WeightA != nil {
		return *m.Effect_Bloom_WeightA
	}
	return 0
}

func (m *MeshModel) GetEffect_Bloom_WeightB() float32 {
	if m != nil && m.Effect_Bloom_WeightB != nil {
		return *m.Effect_Bloom_WeightB
	}
	return 0
}

func (m *MeshModel) GetEffect_Bloom_WeightC() float32 {
	if m != nil && m.Effect_Bloom_WeightC != nil {
		return *m.Effect_Bloom_WeightC
	}
	return 0
}

func (m *MeshModel) GetEffect_Bloom_WeightD() float32 {
	if m != nil && m.Effect_Bloom_WeightD != nil {
		return *m.Effect_Bloom_WeightD
	}
	return 0
}

func (m *MeshModel) GetEffect_Bloom_Vignette() float32 {
	if m != nil && m.Effect_Bloom_Vignette != nil {
		return *m.Effect_Bloom_Vignette
	}
	return 0
}

func (m *MeshModel) GetEffect_Bloom_VignetteAtt() float32 {
	if m != nil && m.Effect_Bloom_VignetteAtt != nil {
		return *m.Effect_Bloom_VignetteAtt
	}
	return 0
}

func (m *MeshModel) GetSetting_LightingPass_DrawMode() int32 {
	if m != nil && m.Setting_LightingPass_DrawMode != nil {
		return *m.Setting_LightingPass_DrawMode
	}
	return 0
}

func (m *MeshModel) GetMeshObject() *Mesh {
	if m != nil {
		return m.MeshObject
	}
	return nil
}

func init() {
	proto.RegisterType((*Scene)(nil), "saveopen.Scene")
	proto.RegisterType((*MeshModel)(nil), "saveopen.MeshModel")
}

func init() { proto.RegisterFile("KuplungAppScene.proto", fileDescriptor_89a2cd885987a1d0) }

var fileDescriptor_89a2cd885987a1d0 = []byte{
	// 1081 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x97, 0xfb, 0x57, 0xdb, 0x36,
	0x14, 0xc7, 0x4f, 0xd3, 0xf1, 0x12, 0x6d, 0x01, 0x85, 0xc7, 0xe5, 0x9d, 0xd1, 0x3d, 0xb2, 0xb2,
	0xa6, 0x1d, 0xb0, 0x95, 0xed, 0xec, 0x97, 0x90, 0x50, 0xe8, 0x36, 0xce, 0x3a, 0xa7, 0x03, 0x92,
	0xfd, 0x90, 0x63, 0x62, 0x25, 0xd1, 0x26, 0x3f, 0x8e, 0xa5, 0x94, 0xfe, 0xcd, 0xfb, 0x2b, 0x76,
	0xac, 0x58, 0xb6, 0x6c, 0xec, 0xd9, 0x3f, 0x01, 0xba, 0xdf, 0xcf, 0x57, 0x8f, 0x7b, 0x75, 0x2d,
	0xd0, 0xda, 0xaf, 0x13, 0x8f, 0x4d, 0x9c, 0x51, 0xd3, 0xf3, 0x3a, 0x03, 0xe2, 0x90, 0x86, 0xe7,
	0xbb, 0xc2, 0xc5, 0xf3, 0xdc, 0xfc, 0x48, 0x5c, 0x8f, 0x38, 0x5b, 0x10, 0x0a, 0xda, 0x64, 0x48,
	0x1d, 0x2a, 0xa8, 0xeb, 0xf0, 0xa9, 0xe6, 0xe0, 0x04, 0xcd, 0x48, 0x04, 0x1f, 0xa2, 0x59, 0xdb,
	0xb5, 0x08, 0xe3, 0xf0, 0xa8, 0xf6, 0xb8, 0xbe, 0x78, 0x54, 0x6d, 0x28, 0xba, 0x71, 0x45, 0xf8,
	0xf8, 0x2a, 0x88, 0x19, 0xa1, 0xe4, 0xe0, 0xdf, 0x6d, 0xb4, 0x10, 0x8d, 0x62, 0x40, 0x73, 0xf2,
	0x97, 0x77, 0x6d, 0x78, 0x54, 0xab, 0xd4, 0x67, 0x0c, 0xf5, 0x27, 0x7e, 0x83, 0x36, 0x3a, 0x44,
	0x08, 0xea, 0x8c, 0x78, 0xbf, 0x4d, 0x86, 0xc4, 0xf7, 0x89, 0x65, 0x10, 0xc7, 0x22, 0x3e, 0x54,
	0x6a, 0x95, 0xfa, 0xbc, 0xb1, 0xae, 0xc2, 0xc9, 0x28, 0x7e, 0x89, 0x70, 0x18, 0xe9, 0xb7, 0x08,
	0xeb, 0x8c, 0x4d, 0x8b, 0x3a, 0x23, 0x78, 0x2c, 0x99, 0x95, 0x30, 0x12, 0x07, 0xf0, 0x21, 0x52,
	0x83, 0xfd, 0x1b, 0xea, 0x93, 0xa1, 0x6f, 0xda, 0x04, 0x3e, 0x93, 0xea, 0xe5, 0x30, 0x10, 0x8d,
	0x6b, 0x8b, 0xea, 0xff, 0xc9, 0xc9, 0x07, 0xc2, 0x39, 0x61, 0xcc, 0x0c, 0x0e, 0x05, 0x66, 0x12,
	0x8b, 0x4a, 0x45, 0xf1, 0x2b, 0x54, 0xd5, 0xc0, 0xd6, 0x84, 0xb1, 0xb7, 0xe6, 0x80, 0xc0, 0xac,
	0x84, 0x70, 0x0c, 0xa9, 0x08, 0x7e, 0x8e, 0x9e, 0x2a, 0xa0, 0xc9, 0xbc, 0xb1, 0x09, 0x73, 0xb5,
	0x4a, 0xbd, 0x62, 0x3c, 0x09, 0x07, 0xe5, 0x18, 0xbe, 0x40, 0xfb, 0x4a, 0xa4, 0xcf, 0xd6, 0x99,
	0xdc, 0x59, 0xf4, 0x23, 0xe5, 0xc1, 0xb2, 0xe6, 0xe5, 0xa9, 0xee, 0x85, 0xb2, 0x1c, 0x15, 0x3e,
	0x45, 0x0b, 0x9e, 0xcb, 0x65, 0x76, 0x6f, 0x61, 0xa1, 0x56, 0xa9, 0x2f, 0x1e, 0x6d, 0xc5, 0x49,
	0xfc, 0xfd, 0xee, 0x6f, 0x32, 0x10, 0x2d, 0xd7, 0xf5, 0x2d, 0xea, 0x98, 0x82, 0x18, 0xb1, 0x58,
	0x27, 0xbb, 0x80, 0xca, 0x93, 0x5d, 0x9d, 0xec, 0xc1, 0x62, 0x79, 0xb2, 0x87, 0x8f, 0xd0, 0x2c,
	0x1f, 0x98, 0x8c, 0xdc, 0xc2, 0x93, 0x42, 0x2c, 0x54, 0x46, 0x4c, 0x17, 0x9e, 0x96, 0x64, 0xba,
	0x11, 0xd3, 0x83, 0x67, 0x25, 0x99, 0x1e, 0x3e, 0x41, 0x73, 0xbe, 0x2b, 0x4c, 0x41, 0x6e, 0x61,
	0xa9, 0x10, 0x52, 0xd2, 0x98, 0xea, 0xc2, 0x72, 0x59, 0xaa, 0x1b, 0x53, 0x3d, 0x58, 0x29, 0x4b,
	0xf5, 0x82, 0x73, 0xb7, 0x28, 0xf7, 0x98, 0x39, 0x20, 0xb7, 0x80, 0x8b, 0xcf, 0x3d, 0x12, 0xeb,
	0x64, 0x17, 0xaa, 0xe5, 0xc9, 0xae, 0x4e, 0xf6, 0x60, 0xb5, 0x3c, 0xd9, 0xc3, 0x5d, 0xb4, 0xa5,
	0x4a, 0xfc, 0xca, 0x14, 0xc4, 0xa7, 0x26, 0x33, 0x82, 0xcb, 0x38, 0x90, 0x97, 0x6e, 0xad, 0xd0,
	0x6a, 0x33, 0xa4, 0x1f, 0xc2, 0xf8, 0x2f, 0xb4, 0x9d, 0xb6, 0xee, 0x78, 0x64, 0x30, 0x61, 0xa6,
	0x7f, 0xfe, 0xc9, 0x83, 0xf5, 0x42, 0xef, 0xad, 0x94, 0xb7, 0x46, 0xe3, 0x63, 0xb4, 0x16, 0x99,
	0x07, 0x1d, 0xed, 0x9a, 0x92, 0xfb, 0xce, 0x3f, 0xd4, 0x81, 0x0d, 0x79, 0x21, 0x57, 0x15, 0xaa,
	0xc7, 0xf0, 0x1f, 0x68, 0x87, 0xbb, 0x8c, 0x5a, 0xbf, 0xd1, 0xd1, 0x58, 0x04, 0x23, 0xd1, 0xc2,
	0x5a, 0x2e, 0x73, 0x7d, 0x00, 0xb9, 0xa4, 0x67, 0xf1, 0x92, 0xae, 0xc9, 0xe0, 0xd8, 0xd8, 0x4e,
	0x32, 0x09, 0x04, 0x9f, 0xa3, 0xf5, 0x94, 0x65, 0xd3, 0xbe, 0xa3, 0xc4, 0x11, 0xb0, 0x99, 0x69,
	0xb6, 0x96, 0x54, 0x87, 0xe2, 0x0c, 0x9b, 0x36, 0x1d, 0x0e, 0x27, 0x9c, 0xc0, 0x56, 0x19, 0x9b,
	0x50, 0x8c, 0x2f, 0xd0, 0x46, 0xca, 0x46, 0x9d, 0x19, 0x6c, 0x67, 0xfa, 0xa4, 0x66, 0x55, 0x6a,
	0xfc, 0x16, 0xed, 0x67, 0x6f, 0xab, 0xdf, 0x11, 0x3e, 0x71, 0x46, 0x62, 0x0c, 0x3b, 0xb2, 0x61,
	0xee, 0x66, 0xee, 0x47, 0x89, 0x32, 0x7c, 0xc2, 0xa5, 0xc6, 0x3e, 0xbb, 0x59, 0x3e, 0xa1, 0x2a,
	0xf2, 0xb9, 0x44, 0xb5, 0x9c, 0x8d, 0xc5, 0x46, 0x7b, 0xd2, 0x68, 0x2f, 0x7b, 0x47, 0x91, 0x53,
	0x2b, 0x2e, 0x1c, 0x29, 0x7a, 0x1f, 0xb6, 0x3d, 0xd8, 0xcf, 0x3c, 0x20, 0x55, 0x48, 0x09, 0x6d,
	0x90, 0xae, 0x84, 0x49, 0x9b, 0xfa, 0x64, 0x7a, 0x63, 0x6a, 0xd9, 0xe9, 0xd2, 0x5d, 0x22, 0x31,
	0x6e, 0xa2, 0xd5, 0x84, 0x8d, 0x2a, 0x9d, 0xcf, 0x33, 0x4d, 0xaa, 0xba, 0x89, 0x2a, 0x9c, 0xb4,
	0x85, 0x2a, 0x9b, 0x83, 0x62, 0x0b, 0x55, 0x34, 0xe9, 0x13, 0x89, 0x4a, 0xe6, 0x79, 0xf1, 0x89,
	0x44, 0x05, 0xd3, 0x44, 0x3b, 0x49, 0x93, 0xf0, 0xbc, 0xd5, 0x96, 0xbe, 0x90, 0xc9, 0xd9, 0x4e,
	0xb0, 0x49, 0x49, 0xae, 0x85, 0xda, 0xd2, 0x97, 0xf9, 0x16, 0xf1, 0x56, 0x76, 0x33, 0x2d, 0xa2,
	0x2d, 0x7d, 0x25, 0x3d, 0x76, 0xb2, 0x3c, 0xa2, 0xad, 0xfc, 0x8c, 0x36, 0xed, 0xf0, 0x8e, 0xbf,
	0x63, 0x6c, 0x62, 0x07, 0xcd, 0x88, 0xba, 0x8e, 0x6c, 0x25, 0xf0, 0xb5, 0x6c, 0x2f, 0xf9, 0x02,
	0xfc, 0x01, 0x6d, 0xa8, 0xee, 0x6a, 0x13, 0x47, 0x5c, 0x12, 0x39, 0x47, 0xf0, 0xf1, 0x82, 0x7a,
	0x61, 0xc7, 0xcb, 0x43, 0x71, 0x03, 0x61, 0x3e, 0x76, 0xef, 0x55, 0xef, 0x39, 0xb7, 0xa8, 0x70,
	0x7d, 0xf8, 0x66, 0xfa, 0xbc, 0x79, 0x18, 0xc1, 0x4d, 0xb4, 0xa4, 0x96, 0xa8, 0x32, 0xf0, 0x42,
	0xce, 0xbe, 0xa1, 0xbd, 0x1d, 0xf5, 0x46, 0x66, 0xa4, 0xf5, 0xba, 0x85, 0xca, 0xc0, 0x61, 0x49,
	0x8b, 0x38, 0x1d, 0xcb, 0x76, 0xaa, 0x77, 0xc3, 0xb7, 0xff, 0xef, 0xf1, 0x00, 0xd0, 0x4d, 0xce,
	0x6d, 0xca, 0xe5, 0xab, 0xeb, 0x65, 0x49, 0x13, 0x05, 0xe8, 0x0f, 0xcb, 0xf7, 0xa6, 0x6f, 0x32,
	0x66, 0x7e, 0xba, 0x32, 0x3d, 0x2f, 0x78, 0xb9, 0x36, 0x12, 0x0f, 0xcb, 0x54, 0x14, 0xbf, 0x40,
	0x2b, 0xe7, 0xc3, 0x21, 0x19, 0x88, 0xfe, 0xc5, 0x19, 0x9b, 0xf8, 0xf2, 0x63, 0x03, 0xaf, 0x64,
	0x11, 0x2c, 0x4d, 0x03, 0x72, 0x3c, 0x18, 0xc6, 0xbf, 0xa0, 0x6a, 0x42, 0x6b, 0x98, 0x16, 0x9d,
	0x70, 0x78, 0x5d, 0x98, 0xf6, 0x15, 0xcd, 0x69, 0x0a, 0xe1, 0x4b, 0x84, 0x13, 0x5e, 0x37, 0xd4,
	0x12, 0x63, 0xf8, 0xae, 0xd0, 0x6a, 0x59, 0xb3, 0x92, 0x0c, 0x7e, 0x8d, 0x56, 0x43, 0xa7, 0x33,
	0xe6, 0xba, 0x76, 0xdf, 0x72, 0xe5, 0x4f, 0x38, 0x9a, 0x16, 0xcf, 0x34, 0x26, 0x87, 0xda, 0xd3,
	0xc8, 0x03, 0xe2, 0x46, 0x16, 0x62, 0x13, 0x8e, 0xe5, 0xe5, 0xd1, 0x89, 0x30, 0x92, 0x43, 0x9c,
	0xc1, 0x49, 0x0e, 0x71, 0x96, 0x43, 0xb4, 0xe0, 0xfb, 0x1c, 0xa2, 0x95, 0x43, 0xb4, 0xe1, 0x87,
	0x1c, 0xa2, 0x8d, 0x8f, 0xd0, 0x5a, 0x82, 0xb8, 0xa6, 0x23, 0x87, 0x08, 0x41, 0xe0, 0x8d, 0x44,
	0xaa, 0x1a, 0xa2, 0x42, 0xf8, 0x14, 0x41, 0x26, 0xd3, 0x14, 0x02, 0x4e, 0x25, 0xb6, 0x9e, 0x81,
	0x35, 0x85, 0xc0, 0x67, 0xa9, 0xde, 0x23, 0x8b, 0x89, 0xf3, 0x7e, 0xdb, 0x37, 0xef, 0x65, 0xd5,
	0xfc, 0x28, 0xab, 0x26, 0xd1, 0xbf, 0x42, 0x8d, 0x92, 0xe0, 0x06, 0x42, 0x36, 0xe1, 0xe3, 0x69,
	0x56, 0xe1, 0xa7, 0x74, 0xff, 0x0d, 0xfe, 0xaf, 0x33, 0x34, 0xc5, 0x7f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x4f, 0x53, 0xb8, 0x45, 0x5e, 0x0e, 0x00, 0x00,
}
